// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// cAICeigen
List cAICeigen(Eigen::Map<Eigen::VectorXd> y, Eigen::Map<Eigen::VectorXd> y_hat, Eigen::Map<Eigen::MatrixXd> X, double& sigma2, Eigen::Map<Eigen::MatrixXd> G, Eigen::Map<Eigen::MatrixXd> Z, int& q, int& m);
RcppExport SEXP _BayesBoost_cAICeigen(SEXP ySEXP, SEXP y_hatSEXP, SEXP XSEXP, SEXP sigma2SEXP, SEXP GSEXP, SEXP ZSEXP, SEXP qSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type y_hat(y_hatSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< double& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int& >::type q(qSEXP);
    Rcpp::traits::input_parameter< int& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(cAICeigen(y, y_hat, X, sigma2, G, Z, q, m));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesBoost_cAICeigen", (DL_FUNC) &_BayesBoost_cAICeigen, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesBoost(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
